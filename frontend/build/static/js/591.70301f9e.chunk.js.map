{"version":3,"file":"static/js/591.70301f9e.chunk.js","mappings":"kLAIA,MAAMA,EAAmBC,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,gIAS7BC,EAAUJ,EAAAA,GAAOC,IAAGI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,oPAapBG,EAASN,EAAAA,GAAOO,OAAMC,IAAAA,GAAAL,EAAAA,EAAAA,GAAA,kOAatBM,EAAWT,EAAAA,GAAOU,MAAKC,IAAAA,GAAAR,EAAAA,EAAAA,GAAA,8NAehBS,EAAYA,KACvB,MAAQC,EAASC,IAAeC,EAAAA,EAAAA,UAAS,KACjCC,EAASC,IAAeF,EAAAA,EAAAA,UAAS,KACjCG,EAAaC,IAAkBJ,EAAAA,EAAAA,UAAS,6EAwB1CK,EAAkBC,IACtB,MAAMC,EAAkBN,EAAQO,QAC5BV,GAAaA,IAAYQ,IAE7BJ,EAAYK,EAAiB,EAG/B,OACEE,EAAAA,EAAAA,MAACzB,EAAgB,CAAA0B,SAAA,CACbT,EAAQU,KAAMb,IAEZW,EAAAA,EAAAA,MAACpB,EAAO,CAAAqB,SAAA,EACND,EAAAA,EAAAA,MAAA,QAAMG,MAAO,CAAEC,WAAY,QAASH,SAAA,CAAC,IAAGZ,MACxCgB,EAAAA,EAAAA,KAACvB,EAAM,CAACwB,QAAUA,IAAMV,EAAeP,GAAWY,SAAC,QAFtCZ,MAMnBgB,EAAAA,EAAAA,KAACpB,EAAQ,CACPsB,KAAK,OACLb,YAAcA,EACdc,QA/BYC,IAXOC,MAYW,IAA9BD,EAAME,OAAOC,MAAMC,QAA8B,UAAdJ,EAAMK,MACvCtB,EAAQqB,QAAU,IACpBE,MAAO,+DACPpB,EAAgB,iEAdJ,MADOe,EAiBGD,EAAME,OAAOC,SAhBU,IAA3BpB,EAAQwB,QAAQN,KAgBUjB,EAAW,IAAID,EAASH,IACtEC,EAAW,IACb,EAwBI2B,UAvCcR,IACe,IAA9BA,EAAME,OAAOC,MAAMC,QAA8B,cAAdJ,EAAMK,MAC1ClB,EAAeJ,EAAQA,EAAQqB,OAAS,IACxCvB,EAAW,IACb,EAoCI4B,SAAYT,GAAWnB,EAAYmB,EAAME,OAAOC,OAChDA,MAAQvB,MAEO,C","sources":["pages/recruit/post/components/TagsInput.tsx"],"sourcesContent":["import { Tag, TagList } from '../../../../components/'\r\nimport { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst TagsInputWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n  gap: 10px;\r\n  min-height: 36px;\r\n  margin-top: 10px;\r\n`;\r\n\r\nconst TagItem = styled.div`\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  height: 26px;\r\n  padding: 3px 13px;\r\n  font-size: 13px;\r\n  background-color: #dedcee;\r\n  border: none;\r\n  border-radius: 20px;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  width: 15px;\r\n  margin-top: 3px;\r\n  height: 15px;\r\n  color: #9ba3a9;\r\n  background-color: inherit;\r\n  border: none;\r\n`;\r\n\r\nconst TagInput = styled.input`\r\n  cursor: text;\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  width: 300px;\r\n  font-size: 16px;\r\n  background-color: inherit;\r\n  border: none;\r\n  outline: none;\r\n\r\n  &::placeholder {\r\n    color: #acb5bd;\r\n  }\r\n`;\r\n\r\nexport const TagsInput = () => {\r\n  const [ tagItem, setTagItem ] = useState(\"\");\r\n  const [ tagList, setTagList ] = useState([]);\r\n  const [ placeholder, setPlaceholder] = useState(\"태그를 설정하세요 (최대 10개)\");\r\n\r\n  const duplicateCheck = ( text ) => {\r\n    return text !== \"\" && tagList.indexOf(text) !== -1 ?  false: true;\r\n  } \r\n\r\n  const onKeyDown = ( event ) => {\r\n    if(event.target.value.length === 0 && event.key === 'Backspace' ){\r\n      deleteTagItem( tagList[tagList.length - 1] );\r\n      setTagItem(\"\");\r\n    }\r\n  }\r\n\r\n  const onKeyUp = ( event ) => {\r\n    if (event.target.value.length !== 0 && event.key === \"Enter\" ) {\r\n      if( tagList.length >= 10 ) {\r\n        alert( \"태그는 최대 10개입니다.\" );\r\n        setPlaceholder( \"태그는 최대 10개입니다.\" );\r\n      }\r\n      else if( duplicateCheck(event.target.value) ) setTagList([...tagList, tagItem]);\r\n      setTagItem(\"\");\r\n    }\r\n  };\r\n\r\n  const deleteTagItem = ( item ) => {\r\n    const filteredTagList = tagList.filter(\r\n      ( tagItem ) => tagItem !== item\r\n    );\r\n    setTagList( filteredTagList );\r\n  };\r\n\r\n  return (\r\n    <TagsInputWrapper>\r\n      { tagList.map(( tagItem ) => {\r\n        return (\r\n          <TagItem key={ tagItem }>\r\n            <span style={{ fontWeight: 'bold' }}>#{ tagItem }</span>\r\n            <Button onClick={ () => deleteTagItem( tagItem ) }>X</Button>\r\n          </TagItem>\r\n        );\r\n      })}\r\n      <TagInput\r\n        type=\"text\"\r\n        placeholder={ placeholder }\r\n        onKeyUp={ onKeyUp }\r\n        onKeyDown={ onKeyDown }\r\n        onChange={( event ) => setTagItem( event.target.value )}\r\n        value={ tagItem }\r\n      />\r\n    </TagsInputWrapper>\r\n  );\r\n}"],"names":["TagsInputWrapper","styled","div","_templateObject","_taggedTemplateLiteral","TagItem","_templateObject2","Button","button","_templateObject3","TagInput","input","_templateObject4","TagsInput","tagItem","setTagItem","useState","tagList","setTagList","placeholder","setPlaceholder","deleteTagItem","item","filteredTagList","filter","_jsxs","children","map","style","fontWeight","_jsx","onClick","type","onKeyUp","event","text","target","value","length","key","alert","indexOf","onKeyDown","onChange"],"sourceRoot":""}